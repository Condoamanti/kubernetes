---
# PersistentVolumeClaim Configuration
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-grafana-var-lib-grafana
  namespace: grafana
  labels:
    type: nfs
  annotations:
    volume.beta.kubernetes.io/storage-class: standard
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
# ConfigMap Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-grafana-server-config
  namespace: grafana
  labels:
    app: grafana-server
data:
  grafana.ini: |-
    [server]
    # Protocol (http, https, socket)
    protocol = https

    # The ip address to bind to, empty will bind to all interfaces
    ;http_addr =

    # The http port to use
    http_port = 3000

    # The public facing domain name used to access grafana from a browser
    ;domain = localhost

    # Redirect to correct domain if host header does not match domain
    # Prevents DNS rebinding attacks
    ;enforce_domain = false

    # The full public facing url you use in browser, used for redirects and emails
    # If you use reverse proxy and sub path specify full url (with sub path)
    ;root_url = https://localhost:3000

    # Log web requests
    ;router_logging = false

    # the path relative working path
    ;static_root_path = public

    # enable gzip
    ;enable_gzip = false

    # https certs & key file
    cert_file = /etc/grafana/ssl/wild.jittersolutions.com.crt
    cert_key = /etc/grafana/ssl/wild.jittersolutions.com.key

    # Unix socket path
    ;socket =
---
# Service Configuration
apiVersion: v1
kind: Service
metadata:
  name: grafana-server
  namespace: grafana
spec:
  externalTrafficPolicy: Cluster
  ports:
  - port: 3000
    name: http
    protocol: TCP
    targetPort: 3000
    nodePort: 30020
  selector:
    app: grafana-server
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
# Deployment Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-server
  namespace: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-server
  template:
    metadata:
      labels:
        app: grafana-server
    spec:
      volumes:
      - name: grafana-var-lib-grafana
        persistentVolumeClaim:
          claimName: pvc-grafana-var-lib-grafana
      - name: grafana-server-config
        configMap:
          defaultMode: 0600
          name: cm-grafana-server-config
      - name: ssh-certificate-crt
        secret:
          secretName: letsencrypt-cert-tls
          secretKey: tls.key
      - name: ssh-certificate-key
        secret:
          secretName: letsencrypt-cert-tls
          secretKey: tls.crt
      containers:
      - name: grafana-server
        image: grafana/grafana:latest
        volumeMounts:
          - name: grafana-var-lib-grafana
            mountPath: /var/lib/grafana
          - name: grafana-server-config
            mountPath: /etc/grafana/grafana.ini
            subPath: grafana.ini
            readOnly: true
          - name: nfs-certificates
            mountPath: /etc/grafana/ssl/
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        ports:
        - containerPort: 3000
          name: http
        securityContext:
          runAsUser: 0
          # If using Red Hat OpenShift uncomment this:
          #privileged: true
---